environment,
  # single_method
  tabular_data
    tabular_data_file = 'sampling_xy.dat'
  output_precision = 10 # Default = 10 ; Max = 16

  # method_pointer = 'DACE_SURROGATE_METHOD'

#============================================================================================
# Surrogate model definitions
#============================================================================================

method, 
  id_method = 'DACE_SURROGATE_METHOD'   
  model_pointer = 'DACE_MODEL'  
  sampling # all_variables # 5.2
    seed = 12351 rng rnum2
    fixed_seed
    sample_type lhs # Metodo de sampling 
    samples = 40

model,                 
  id_model = 'DACE_MODEL'    
  single             
    variables_pointer = 'SAMPLING_VARIABLES'  
    interface_pointer = 'SAMP_INTERFACE' 
    responses_pointer = 'SAMPLING_RESPONSES'   


variables, # Variables defined for the sampling.
  id_variables = 'SAMPLING_VARIABLES'
    active all
      continuous_design = 1
        descriptors   'G_int' #'GIc' 'GIIc'
        lower_bounds   1.0   #1.0    1.0
        initial_point  3.0   #3.0    3.0
        upper_bounds   7.0   #7.0    7.0

responses,
  id_responses = 'SAMPLING_RESPONSES'
  response_functions = 2 # Objective Function, Constraint 1, Constraint 2
  response_descriptors 'SEA' 'PEAK'
  no_gradients # Do not need graedients for sampling
  no_hessians 


interface,
  id_interface = 'SAMP_INTERFACE'
  fork
    analysis_driver = 'python driver.py'
    # analysis_components = 'surr'
    # output_filter   = 'HC_output_filter.sh'
    parameters_file = 'driver.in'
    results_file    = 'driver.out'

    aprepro
    deactivate
          # evaluation_cache  # Deactivation of the evaluation cache
          restart_file      # Deactivation of the restart file
          # active_set_vector # Deactivation of ASV requests. Use for driver simplicity
      
    asynchronous
     # evaluation_concurrency = 25  # Concurrency of the evaluations
     analysis_concurrency = 1      # Concurrency of the analysis drivers

    work_directory
      named 'sample'
      directory_tag     # Tag working directories with iteration number
      directory_save    # Save work directories
      file_tag          # Tag parameters and results files with iteration number
      file_save         # Save parameters and results files
      copy_files = 'driver.py' 
                   'paramodel.py'
                   'l-abaqus.sh'
                   'commons.dat'
